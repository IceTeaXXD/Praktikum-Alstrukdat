procedure readMatrix (output m : Matrix)
    { I.S. sembarang }
    { F.S. Ukuran efektif dan semua elemen m terdefunusu }
    { Proses : Membaca masukan ukuran baris dan kolom efektif
            dari keyboard dan melakukan CreateMatrix dan mengisi nilai efektifnya.
            Mengisi elemen m dengan pembacaan dari kehboard secara traversal per baris.}

KAMUS LOKAL
    baris, kolom : integer
    x : integer

ALGORITMA
    input(baris)
    input(kolom)
    CreateMatrix(baris, kolom)
    setRowEff(m,baris)
    SetColEff(m,kolom)
    i traversal 0..getRowEff(m)
        j traversal 0..getColEff(m)
            input(x)
            setElmt(m,i,j,x)


function isMatrixEqual (m1,m2: Matrix) → boolean
{ Mengirimkan true jika m1 = m2, yaitu ukuran efektif m1 dan m2 sama dan untuk
    setiap i,j yang merupakan indeks baris dan kolom, m1[i,j]=m2[i,j] }

KAMUS LOKAL
    i,j : integer
    isEq : boolean

ALGORITMA
    isEq ← true
    { Cek Kondisi Panjang Matrix }
    if (getRowEff(m1) ≠ getRowEff(m2)) or (getColEff(m1) ≠ getColEff(m2)) then
        isEq ← false
    
    else
        { Looping cek isi dari matrix }
        while (i ≤ getRowEff(m1)) and (isEq) do
            while (j ≤ getColEff(m1)) and (isEq) do
                if (getElmt(m1,i,j) ≠ getElmt(m2,i,j)) then
                    isEq ← false
                else
                    j ← j + 1
            i ← i + 1
    -> isEq


function isSparse (m: matrix) → boolean
    { Mengirimkan true jika m adalah matriks sparse: matriks “jarang” dengan
    definisi: hanya maksimal 5% dari memori matriks yang efektif bukan
    bernilai 0 }

KAMUS LOKAL
    count, countElmt : integer
    i, j : integer
    persentase : real

ALGORITMA
    {Inisiasi Variabel}
    count ← 0
    countElmt ← getRowEff(m) * getColEff(m)
    
    {Looping Cek 0}
    i traversal 0..getRowEff(m)
        j traversal 0..getColEff(m)
            if getElmt(m,i,j) = 0 then
                count ← count + 1

    {Cek Persentase}
    persentase <- count / countElmt

    {Return Cek Persentase}
    -> (persentase <= 0.05)


function transpose (m: Matrix) → Matrix
    { Menghasilkan transpose dari m yaitu setiap elemen m[i,j] ditukar nilainya dengan elemen m[j,i] }

KAMUS LOKAL
    mTrans : Matrix
    i, j : integer

ALGORITMA
    {Inisiasi Variabel}
    CreateMatrix(mTrans, getColEff(m), getRowEff(m))
    # setRowEff(mTrans, getColEff(m))
    # setColEff(mTrans, getRowEff(m))

    {Looping Transpose}
    i traversal 0..getRowEff(m)
        j traversal 0..getColEff(m)
            setElmt(mTrans,j,i,getElmt(m,i,j))

    -> mTrans